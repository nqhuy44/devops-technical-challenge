name: Prod deployment

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch:

env:
  ENVIRONMENT: dev
  env: dev

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./dist
            ./node_modules
          
  # lint:
  #   name: Lint
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Use Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x

  #   - Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: build-artifacts

  #   - name: Lint
  #     run: npm run lint

  #   - name: Test
  #     run: npm run test

  # unit-test:
  #   name: Unit test
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Use Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x

  #   - Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: build-artifacts

  #   - name: Test
  #     run: npm run test

  dockerize:
    name: Dockerize
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set IMAGE_TAG
        id: set_tag
        run: echo "::set-output name=tag::$(git rev-parse --short "$GITHUB_SHA")"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_tag.outputs.tag }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT

      - name: Scan Docker image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.set_tag.outputs.tag }}
        run: |
          aws ecr start-image-scan --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG
          aws ecr wait image-scan-complete --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG
          SCAN_RESULTS=$(aws ecr describe-image-scan-findings --repository-name $ECR_REPOSITORY --image-id imageTag=$IMAGE_TAG)
          echo "$SCAN_RESULTS"
          COUNT_HIGH=$(echo "$SCAN_RESULTS" | jq '.imageScanFindings.findingSeverityCounts.HIGH')
          if [ "$COUNT_HIGH" -gt 0 ]; then
            echo "High vulnerability detected!"
            exit 1
          fi

  deploy:
    name: Deploy
    needs: dockerize
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup npm
        run: npm install
        working-directory: infra

      - name: Prepare .env file
        run: |
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          cp .env.dev infra/.env

      - name: Deploy Pulumi stack
        uses: pulumi/actions@v5
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        with:
          work-dir: infra
          stack-name: ${{ env.ENVIRONMENT }}
          command: up
